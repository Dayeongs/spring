<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sample.mapper.EmpMapper">
	
	<select id="getTotalRows" parameterType="com.sample.web.dto.Criteria" resultType="int">
		select
			count(*)
		from
			shop_employees
		<where>
			<if test="opt != null">
				<choose>
					<when test="opt == 'name'">
						emp_name like '%' || #{keyword} || '%'
					</when>
					<when test="opt == 'salary'">
						emp_salary between 0 and to_number(#{keyword})
					</when>
				</choose>
			</if>
		</where>
	</select>
	
	<select id="getEmployees" parameterType="com.sample.web.dto.Criteria" resultType="com.sample.vo.Employee">
		select
			emp_no				as no,
			emp_name			as name,
			emp_tel				as tel,
			emp_email			as email,
			emp_salary 			as salary,
			emp_hire_date		as hireDate,
			dept_no				as "dept.no",
			dept_name			as "dept.name"
		from
			(select
				E.emp_no,
				E.emp_name,
				E.emp_tel,
				E.emp_email,
				E.emp_salary,
				E.emp_hire_date,
				E.dept_no,
				D.dept_name,
				E.emp_created_date,
				E.emp_updated_date,
				<choose>
					<when test="sort == 'hireDate'">
						row_number() over (order by emp_hire_date desc) row_num
					</when>
					<when test="sort == 'name'">
						row_number() over (order by emp_name asc) row_num
					</when>					
					<when test="sort == 'lowsalary'">					
						row_number() over (order by emp_salary asc) row_num
					</when>
					<when test="sort == 'highsalary'">
						row_number() over (order by emp_salary desc) row_num			
					</when>
				</choose>
			from
				shop_employees E, shop_depts D
			<where>
				E.dept_no = D.dept_no
				<if test="opt != null">
					<choose>
						<when test="opt == 'name'">
							and E.emp_name like '%' || #{keyword} || '%'
						</when>
						<when test="opt == 'salary'">
							and E.emp_salary between 0 and to_number(#{keyword})
						</when>
					</choose>
				</if>
			</where>)
		where
			row_num between #{begin} and #{end}
	</select>
	
	<!-- 직원 전체 조회 -->
	<select id="getAllEmployees" resultType="com.sample.vo.Employee">
		select
			E.emp_no			as no,
			E.emp_name			as name,
			E.emp_tel			as tel,
			E.emp_email			as email,
			E.emp_salary 		as salary,
			E.emp_hire_date		as hireDate,
			E.dept_no			as "dept.no",
			D.dept_name			as "dept.name",
			E.emp_created_date	as createdDate,
			E.emp_updated_date	as updatedDate
		from 
			shop_employees E, shop_depts D
		Where
			E.dept_no = D.dept_no
		order by
			emp_no asc
	</select>
	
	<!-- 직원 상세 조회 -->
	<select id="getEmployeeDetail" parameterType="int" resultType="com.sample.vo.Employee">
		select
			E.emp_no			as no,
			E.emp_name			as name,
			E.emp_tel			as tel,
			E.emp_email			as email,
			E.emp_salary 		as salary,
			E.emp_hire_date		as hireDate,
			E.dept_no			as "dept.no",
			D.dept_name			as "dept.name",
			E.emp_created_date	as createdDate,
			E.emp_updated_date	as updatedDate
		from 
			shop_employees E, shop_depts D
		Where
			E.emp_no = #{value}
			and E.dept_no = D.dept_no
	</select>
	
	<insert id="insertEmployee" parameterType="com.sample.vo.Employee">
		insert into shop_employees
			(emp_no, emp_name, emp_tel, emp_email, 
				emp_salary, emp_hire_date, dept_no)
		values
			(emps_seq.nextval, #{name}, #{tel}, #{email},
				#{salary}, #{hireDate}, #{dept.no})	
	</insert>
	
	<update id="updateEmployee" parameterType="com.sample.vo.Employee">
		update 
			shop_employees
		set
			emp_name = #{name},
			emp_tel = #{tel},
			emp_email = #{email},
			emp_salary = #{salary},
			emp_hire_date = #{hireDate},
			dept_no = #{dept.no},
			emp_updated_date = sysdate
		where
			emp_no = #{no}
	</update>
	
	<delete id="deleteEmployee" parameterType="int">
		delete from
			shop_employees
		where
			emp_no = #{no}
	</delete>

</mapper>